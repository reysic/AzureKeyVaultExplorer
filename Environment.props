<?xml version="1.0" encoding="utf-8"?>
<!--
// Copyright (c) Microsoft Corporation. All rights reserved. 
// Licensed under the MIT License. See License.txt in the project root for license information. 
-->
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Repository root -->
    <RepositoryRoot>$(MSBuildThisFileDirectory)</RepositoryRoot>

    <!-- Default Configuration -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <!-- Default Platform -->
    <Platform Condition=" '$(Platform)' == '' ">x64</Platform>
    
    <!-- Target .NET framework (default) -->
    <TargetFrameworkVersion>v4.5.1</TargetFrameworkVersion>

    <!-- Generate binding redirect automatically across projects -->
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>

    <!-- Make sure we generate redirects for libraries (dll) as well (by default, it's only exe) -->
    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>

    <!-- Disable Visual Studio hosting process -->
    <UseVSHostingProcess>false</UseVSHostingProcess>

    <!-- Generate [AssemblyName].BuildInfo.config with SourceControl and Build info -->
    <GenerateBuildInfoConfigFile>true</GenerateBuildInfoConfigFile>
    <IncludeServerNameInBuildInfo>true</IncludeServerNameInBuildInfo>
    <WebProjectOutputDir Condition="'$(WebProjectOutputDir)' == ''">.</WebProjectOutputDir>
  </PropertyGroup>

  <!-- Import (generated) NuGet package properties -->
  <Import Project="$(RepositoryRoot)\packages\Packages.props" 
    Condition="Exists('$(RepositoryRoot)\packages\Packages.props')"/>

  <!-- Import repository custom properties (if any) -->
  <Import Project="$(RepositoryRoot)\Environment.Custom.props" 
    Condition="Exists('$(RepositoryRoot)\Environment.Custom.props')"/>
  

  <!-- 
    Hook up a Release build target (in Debug configuration) in case 
    we want to build both Debug and Release configurations - we always 
    start with Debug configuration and then proceed to Release if build
    (in Debug) was successful. Note that the technique used here should 
    also cover building solutions - not just individual projects. 
    -->
  <Target Name="BuildRelease" AfterTargets="AfterBuild"
    Condition="'$(BuildRelease)' != '' and '$(Configuration)' == 'Debug'">
    <ItemGroup>
      <ProjectToBuild Include="$(MSBuildProjectFile)">
        <Properties>Configuration=Release</Properties>
      </ProjectToBuild>
    </ItemGroup>
    <Message Text="Building release configuration for project [@(ProjectToBuild)] ..." />
    <MSBuild Projects="@(ProjectToBuild)" BuildInParallel="true" />
  </Target>
  <Target Name="CleanRelease" AfterTargets="AfterClean"
    Condition="'$(BuildRelease)' != '' and '$(Configuration)' == 'Debug'">
    <ItemGroup>
      <ProjectToBuild Include="$(MSBuildProjectFile)">
        <Properties>Configuration=Release</Properties>
      </ProjectToBuild>
    </ItemGroup>
    <Message Text="Cleaning release configuration for project [@(ProjectToBuild)] ..." />
    <MSBuild Projects="@(ProjectToBuild)" BuildInParallel="true" Targets="Clean"/>
  </Target>
  
</Project>

